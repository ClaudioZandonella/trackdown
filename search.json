[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to trackdown","title":"Contributing to trackdown","text":"Please note trackdown package released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Contributing to trackdown","text":"opening issue, please try include minimal reproducible example problem can quickly verified possible figure fix . make example reproducible include: command generated problem copy local document .trackdown folder (available) copy Google Drive document (available) session_info()$platform output possible, include entire project folder removing private information files related issue. allow evaluation issues related path definitions file locations. Note, however, problems may Operative System specific depend computer global settings. Thus, possible problem reproducible computers.","code":""},{"path":"/CONTRIBUTING.html","id":"pull-requests","dir":"","previous_headings":"","what":"Pull requests","title":"Contributing to trackdown","text":"contribute trackdown, create pull request. Follow general rules proposing change: consistently works three main Operative Systems (.e., macOS, Linux, Windows) document function roxygen test function testthat minimize dependencies","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2021 Authors names  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. rmdrive Copyright (C) 2021 Authors names This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/TODO.html","id":null,"dir":"","previous_headings":"","what":"TODO","title":"TODO","text":"clean utilities file .exit() avoid leaving trash function fails remove report_pdf save default setting hide_chunks upload_report document user don’t need specify time change default report name filename + report manage removed chunk google drive exclude setup chunk","code":""},{"path":"/TODO.html","id":"notes","dir":"","previous_headings":"","what":"Notes","title":"TODO","text":"init_rmdrive() function argument local_rmd used print name. - [x] Code line proj_name <- sub(\"\\\\..*\", \"\", local_rmd) remove file extension problematic file name points name (e.g., “trial.file.rmd”). see extract_yaml() function body repeated hide_chunk() set chunks NA possible conflict “NA”? hide_chunk() code line stringr::str_remove_all(., \"NA\") upload_report() chunk_info[!stringr::str_detect(temp_chunk$name, stringr::regex(‘setup’, ignore_case = T)), ] # remove echo = F chunks ?? add message render report; evaluate keep separate hide chunk/ upload_report. deal possible errors compiling. cache","code":""},{"path":"/TODO.html","id":"problems","dir":"","previous_headings":"","what":"Problems","title":"TODO","text":"problems chunks {} syntax like simply writing raw code evaluate problems restoring first last chunk","code":""},{"path":"/TODO.html","id":"march","dir":"","previous_headings":"","what":"March","title":"TODO","text":"example_1.Rmd uploaded < add name gfile>! evaluate get_root_id works also team_drive (case bind two conditions)","code":""},{"path":"/TODO.html","id":"april","dir":"","previous_headings":"","what":"April","title":"TODO","text":"change sarting point header rnw (1st line) resore documen-header missing top document new line first-second chunk messages (path drive) document restore_file unlink() instead file.remove() within testing functions substitute readLines() readr::read_lines() change documentation download_document(). input file suggested without extension (rmd) check happens library(trackdown) trying complicated rmd document lot chunks text","code":""},{"path":"/TODO.html","id":"may","dir":"","previous_headings":"","what":"May","title":"TODO","text":"add “sharedWithMe” option allow collaborators access shared files (https://github.com/tidyverse/googledrive/issues/154#issuecomment-317755269)","code":""},{"path":"/TODO.html","id":"future","dir":"","previous_headings":"","what":"Future","title":"TODO","text":"[] Add plug-functions [] gwet sharable links [] support md latex files","code":""},{"path":"/TODO.html","id":"march-2022","dir":"","previous_headings":"","what":"March 2022","title":"TODO","text":"fix recognize indented chunks","code":""},{"path":"/articles/oauth-app-configuration.html","id":"creating-an-app-in-google-cloud-console","dir":"Articles","previous_headings":"","what":"Creating an App in Google Cloud Console","title":"OAuth App Configuration","text":"Trackdown already provides internal app use Google APIs. However, numebr users limited already reached maximum number (.e., 100 users). Thus use trackdown, required create App Google Cloud Console. create App Google Cloud Console, follow steps: Access Google Cloud Console https://console.cloud.google.com/. first time, need select country accept terms service Create new project clicking button “Select project” button “NEW PROJECT”  Specify name project click “CREATE”  Select newly created project open Now need activate required APIs. left menu select “APIs services” > “Enable APIs services”  Click “ENABLE APIS SERVICES” button  Using API Library search service need select two APIs  Select “Google Drive API” list click “ENABLE”  Select “Google Docs API” list click “ENABLE” Next, need specify setting consent screen. left menu, select “OAuth consent screen”, choose “External” User Type click “CREATE”  Specify App information “App name” “User support email” (use email)  Specify also developer contact information (use email) press “SAVE CONTINUE” Next, need select required scopes. Click “ADD REMOVE SCOPES”  Select required scopes “…/auth/userinfo.email” “openid”  Select also “…/auth/drive” “…/auth/docs”  Click “Update” end list save changes. selected sensitive scopes, pop-appear. worry, scopes required managed files Google Drive. Click “CONTINUE” selcting required scopes, obtain following summary list  precise, one among “…/auth/drive” “…/auth/docs” necesssary. However, avoid possible issue selected [OPTIONAL] next section, possible specify users (email) allow using newly created app. Alternatively, can publish app let everyone (share app credentials) use app (see ) “Summary” section, can check details press “BACK DASHBOARD” saving changes Next, can publish app allow anyone (share app credentials) use app (way need add email manually testers list). , click “PUBLISH APP” “OAuth consent screen” confirm Now, need obtain credentials use newly created app. Form “Credentials” panel, click “CREATE CREDENTIALS” select “OAuth client ID”  “Application type”, select “Desktop app” specify client app name. Next click “CREATE”  window display credentials use app. need download JSON file credentials clicking “DOWNLOAD JSON” alternatively can copy “Client ID” “Client Secret”  information required use Google APIs newly created app. users information can use app. can also retrieve credentials second moment clicking download button list “OAuth2.0 Client IDs”","code":""},{"path":"/articles/oauth-app-configuration.html","id":"users-authentication-in-r","dir":"Articles","previous_headings":"","what":"Users’ authentication in R","title":"OAuth App Configuration","text":"created app obtained credentials use (.e., JSON file), ready configure trackdown. configure trackdown, follow steps: Save JSON file app credentials safe place. file shared required users. Avoid saving file public repositories (details ) Set TRACKDOWN_APP environment variable location JSON file. convenient .Renviron file usethis::edit_r_environ(). way, trackdown able automatically retrieve app credentials. careful using correct absolute/relative path according specific needs Call trackdown_auth_configure(path = \"path//downloaded/json\") indicating JSON lives. command needs run session Alternatively, instead using JSON details, can specify directly app client id secret. Client id secret can copied “Credentials” panel Google Cloud Console (see ). Next, first time use trackdown, directed web browser asked sign Google account grant permission communicate Google Drive. get scary warning untrusted application, application one just created. Click “Advanced” “Go App (unsafe)” proceed oauth flow. Select options (required) continue. Now, ready use trackdown!","code":"my_app <- httr::oauth_app(   appname = \"acme-corp\",   key     = \"123456789.apps.googleusercontent.com\",   secret  = \"abcdefghijklmnopqrstuvwxyz\" ) trackdown_auth_configure(app = my_app)"},{"path":[]},{"path":"/articles/oauth-app-configuration.html","id":"app-credentials","dir":"Articles","previous_headings":"Details","what":"App Credentials","title":"OAuth App Configuration","text":"important trackdown access app credentials. default, trackdown first checks path JSON file specified via TRACKDOWN_APP environment variable. , trackdown use internal credentials. However, already exceeded user limits. , user custom app credentials need indicated specifying JSON file path app info (obtained via httr::oauth_app() function) function trackdown_auth_configure(). see following error using trackdown internal credentials already exceeded user limits. Note credential used trackdown automaticlayy applied alsso googledrive package functions used internally trackdown functions","code":""},{"path":"/articles/oauth-app-configuration.html","id":"users-credentials","dir":"Articles","previous_headings":"Details","what":"User’s Credentials","title":"OAuth App Configuration","text":"trackdown manage authentication process using gargle R-package. default, user credentials cached folder user’s home directory, ~/.R/gargle/gargle-oauth, can automatically refreshed, necessary. Storage user level means token can used across multiple projects tokens less likely synced cloud accident. Note one using R web-based platform like RStudio Server Cloud, variant user authentication flow, known --band auth (“oob”). possible personalize gargle’s default settings adding options .Rprofile startup file. example, preferred Google account cache folder can set:","code":"options(   gargle_oauth_email = \"my_email@gmail.com\",   gargle_oauth_cache = \"/path/to/folder/that/does/not/sync/to/cloud\" )"},{"path":"/articles/oauth-app-configuration.html","id":"resources","dir":"Articles","previous_headings":"Details","what":"Resources","title":"OAuth App Configuration","text":"details see: https://gargle.r-lib.org/articles/gargle-auth--client-package.html#changing-identities--https://gargle.r-lib.org/articles/get-api-credentials.html#oauth-client-id--secret https://gargle.r-lib.org/index.html learn manage credential securely, see: - https://gargle.r-lib.org/articles/managing-tokens-securely.html","code":""},{"path":"/articles/trackdown-features.html","id":"arg-feat","dir":"Articles","previous_headings":"","what":"Arguments and Features","title":"Function Arguments and Features","text":"trackdown functions share common arguments used manage workflow: Moreover, uploading updating file Google Drive upload_file() update_file() respectively, two extra arguments available: hide_code hide header code code chunks document. path_output upload rendered output document Google Drive conjunction .Rmd (.Rnw) document. section, arguments trackdown functions introduced, describing default settings highlighting main features.","code":"*_file(file,        gfile = NULL,        gpath = \"trackdown\",        shared_drive = NULL)"},{"path":"/articles/trackdown-features.html","id":"file","dir":"Articles","previous_headings":"Arguments and Features","what":"file","title":"Function Arguments and Features","text":"string indicating path local .Rmd (.Rnw) file. trackdown functions take reference local file manage workflow. Thus, file argument mandatory, uploading (updating) file Google Drive downloading edited version Google Drive.","code":""},{"path":"/articles/trackdown-features.html","id":"gfile","dir":"Articles","previous_headings":"Arguments and Features","what":"gfile","title":"Function Arguments and Features","text":"string indicating name file Google Drive. default (NULL), name local file (without extension) used name file Google Drive. specifying gfile argument one can personalize name file Google Drive. case, one remember point correct file Google Drive every time one updates downloads file collaborative writing process.","code":""},{"path":"/articles/trackdown-features.html","id":"gpath","dir":"Articles","previous_headings":"Arguments and Features","what":"gpath","title":"Function Arguments and Features","text":"string indicating directory Drive shared drive (optional). default, files uploaded folder \"trackdown/\" Google Drive. specify another folder, full path required (e.g., \"trackdown/my_folder/\"). indicated folder already available Google Drive, user asked permission create . One can use NULL upload file directly root level, although recommended.","code":""},{"path":"/articles/trackdown-features.html","id":"shared-drive","dir":"Articles","previous_headings":"Arguments and Features","what":"shared_drive","title":"Function Arguments and Features","text":"string indicating name shared drive (optional). default, personal Google Drive (.e., Drive) used, shared drive can specified facilitate collaboration.","code":""},{"path":"/articles/trackdown-features.html","id":"hide-code","dir":"Articles","previous_headings":"Arguments and Features","what":"hide_code","title":"Function Arguments and Features","text":"logical value indicating whether code header document (YAML header LaTeX preamble) code chunks removed document uploaded (updated). argument available upload_file() update_file() functions. default, value set FALSE. set TRUE, code document header code chunks removed document automatically restored downloaded. Placeholders type “[[document-header]]” “[[chunk-<name>]]” displayed instead. feature intended prevent collaborators inadvertently making changes code Google Docs might corrupt file allows focus narrative text. Note guarantee correct code restoration, placeholders must modified removed.","code":""},{"path":"/articles/trackdown-features.html","id":"rich-text","dir":"Articles","previous_headings":"Arguments and Features","what":"rich_text","title":"Function Arguments and Features","text":"trackdown v1.3.0 [currently available GitHub] logical value (default ) indicating whether upload Google Docs rich document. Rich text feature allows : Highlight Important Text. Important text changed highlighted. includes, added Instructions top document, placeholders hiding code, header document (YAML header LaTeX preamble), code chunks, -line code. prevents collaborators inadvertently making changes code might corrupt file. See example Figure .  rich_text_par argument used used pass list custom settings rich_text. Currently supported custom settings : rgb_color. Define highlight colour. requires list elements red, green, blue element numeric value 0 1. Examples custom settings,","code":"# Change default color to opaque light-blue blue_color <- list(red = 102/255,                    green = 204/255,                    blue = 255/255)  upload_file(file = \"path-to/my-file\", rich_text = TRUE,             rich_text_par = list(rgb_color = blue_color))"},{"path":"/articles/trackdown-features.html","id":"path-output","dir":"Articles","previous_headings":"Arguments and Features","what":"path_output","title":"Function Arguments and Features","text":"string indicating output path (.e., resulting rendered document). argument available upload_file() update_file() functions. default (NULL), output uploaded Google Drive. specified, output file (.e., rendered HTML PDF file) uploaded conjunction main file. output named Google Drive like main file plus “-output” end (e.g., given main file name “-Report”, output named “-Report-output”). feature intended help collaborators evaluate overall layout, including figures tables, allows add comments propose discuss changes (See Figure ). Note , case PDF files, possible add comments directly file Google Drive. However, possible HTML files.  case HTML files, trackdown can automatically convert PDFs uploading Google Drive. feature requires pagedown package available. pagedown package installed dependency trackdown, installed manually user already available. function pagedown::chrome_print() used convert HTML PDF. Note Google Chrome installed user’s system conversion operation.","code":""},{"path":"/articles/trackdown-features.html","id":"extra-arguments","dir":"Articles","previous_headings":"Arguments and Features","what":"Extra Arguments","title":"Function Arguments and Features","text":"extra arguments added allow specific function features: force logical value indicating whether skip confirm check user (default ). argument available functions allows users skip confirm checks overwriting documents. See issue #27 details rm_gcomments logical value indicating whether remove Google comments. downloading document quick check download Google comments document well. argument allows users remove Google comments automatically (available download_file() render_file() functions). See issue #25 details","code":""},{"path":[]},{"path":"/articles/trackdown-privacy-policy.html","id":"accessing-user-data","dir":"Articles","previous_headings":"Privacy Google account and user data","what":"Accessing User Data","title":"Privacy Policy for trackdown Access to Google APIs","text":"trackdown package accesses Google resources local machine. machine communicates directly Google APIs. Trackdown R Package project never receives data permission access data. owners project can see anonymous, aggregated information usage tokens obtained OAuth client, APIs endpoints used. trackdown package includes functions can execute order read modify data. can happen provide token, requires authenticate specific Google user authorize actions. trackdown package can help get token guiding OAuth flow browser. must consent allow Trackdown R Package project operate behalf. OAuth consent screen describe scope authorized, e.g., name target API(s) whether authorizing “read ” “read write” access. two ways use packages without authorizing Trackdown R Package project: bring service account token configure package use OAuth client choice.","code":""},{"path":"/articles/trackdown-privacy-policy.html","id":"scopes","dir":"Articles","previous_headings":"Privacy Google account and user data","what":"Scopes","title":"Privacy Policy for trackdown Access to Google APIs","text":"Overview scopes requested Trackdown R Package project rationale: userinfo.email (read ): Trackdown R Package project request scope cached tokens can labelled associated Google user, allowing easily access Google APIs one identity. Trackdown R Package project access store Google password. Drive (read/write): trackdown package allows upload, modify, download files Drive therefore default scopes include read/write access.","code":""},{"path":"/articles/trackdown-privacy-policy.html","id":"sharing-user-data","dir":"Articles","previous_headings":"Privacy Google account and user data","what":"Sharing User Data","title":"Privacy Policy for trackdown Access to Google APIs","text":"trackdown package may store credentials local machine, later reuse . Use caution using package shared machine. default, OAuth token cached local file, ~/.R/gargle/gargle-oauth. See documentation gargle::gargle_options() gargle::credentials_user_oauth2() information control location token cache suppress token caching, globally individual token level.","code":""},{"path":"/articles/trackdown-privacy-policy.html","id":"policies-for-authors-of-packages-or-other-applications","dir":"Articles","previous_headings":"","what":"Policies for Authors of Packages or Other Applications","title":"Privacy Policy for trackdown Access to Google APIs","text":"use API key client ID Trackdown R Package project external package tool. Per Google User Data Policy https://developers.google.com/terms/api-services-user-data-policy, application must accurately represent authenticating Google API services. use packages inside another package application executes logic — opposed code Trackdown R Package project user — must communicate clearly user. use credentials Trackdown R Package project; instead, use credentials associated project user.","code":""},{"path":"/articles/trackdown-tech-notes.html","id":"instructions","dir":"Articles","previous_headings":"","what":"Trackdown Instructions","title":"Technical Notes","text":"uploading (updating) file Google Drive, trackdown adds simple instructions reminders top document. example, case file named -Report.Rmd following instructions added: particular, menu option accepting changes pointed information name local file selected option hiding code displayed. instructions automatically removed document downloaded must modified.","code":"#----Trackdown Instructions----# This is not a common Document. The Document includes properly formatted Markdown syntax and R code. Please be aware and responsible in making corrections as you could break the code. Limit changes to narrative text and avoid modifying R code. Please do not remove placeholders of type \"[[chunk-<name>]]\" or \"[[document-header]]\" Once the review is over accept all changes: Tools -> Review suggested edits -> Accept all. You must not modify or remove these lines, we will do it for you ;) FILE-NAME: My-Report.Rmd HIDE-CODE: TRUE #----End Instructions----#"},{"path":"/articles/trackdown-tech-notes.html","id":"Html2Pdf","dir":"Articles","previous_headings":"","what":"Html 2 Pdf","title":"Technical Notes","text":"trackdown package allows uploading rendered output file (.e., HTML PDF file) together main file. allows collaborators evaluate overall layout, including figures tables, add comments propose discuss changes. However, case PDF files, collaborators can add comments directly file Google Drive. possible HTML files. working HTML output files, trackdown can automatically convert PDFs uploading Google Drive. feature requires pagedown package available. pagedown package installed dependency trackdown, installed manually user already available. function pagedown::chrome_print() used convert HTML PDF. Note Google Chrome installed user’s system conversion operation.","code":""},{"path":"/articles/trackdown-tech-notes.html","id":"auth","dir":"Articles","previous_headings":"","what":"Authentication","title":"Technical Notes","text":"trackdown v1.3.0 [currently available GitHub], trackdown package uses API credentials (OAuth client ID secret; see vignette(\"trackdown-privacy-policy\")). [IMPORTANT] currently reached maximum number users API credentails. Installing development trackdown GitHub require create API credentials. Please, see instructions https://claudiozandonella.github.io/trackdown/articles/oauth-app-configuration.html hood, trackdown package uses functions googledrive R package (Official Documentation) manage files transfers Google Drive. operations requires authorization view manage user’s Google Drive files. first time one uses trackdown, one directed web browser asked sign one’s Google account grant googledrive permission communicate Google Drive. Authentication managed gargle R package (Official Documentation). default, user credentials cached folder user’s home directory, ~/.R/gargle/gargle-oauth, can automatically refreshed, necessary. Storage user level means token can used across multiple projects tokens less likely synced cloud accident. Note one using R web-based platform like RStudio Server Cloud, variant user authentification flow, known --band auth (“oob”). See help page googledrive::drive_auth() information (link). possible personalize gargle’s default settings adding options .Rprofile startup file. example, preferred Google account cache folder can set: See gargle documentation information (link).","code":"options(   gargle_oauth_email = \"my_email@gmail.com\",   gargle_oauth_cache = \"/path/to/folder/that/does/not/sync/to/cloud\" )"},{"path":"/articles/trackdown-tech-notes.html","id":"hidden-folder","dir":"Articles","previous_headings":"","what":"The .trackdown folder","title":"Technical Notes","text":"uploading updating .Rmd (.Rnw) file Google Drive, possible remove code header document (YAML header LaTeX preamble) code chunks specifying argument hide_code = TRUE. header code code chunks saved hidden folder named .trackdown created location uploaded .Rmd (.Rnw) file. example, uploading file named -Report.Rmd, two files created: -Report.Rmd-header_info.rds - containing header code -Report.Rmd-chunk_info.rds - containing code chunks files required automatically restore header code code chunks document downloaded Google Drive. Consequently, important delete move hidden .trackdown folder. folder always location .Rmd (.Rnw) file. recommended track hidden .trackdown folder using Git. provides extra layer safety chance restore code automatically folder deleted modified accident.","code":""},{"path":"/articles/trackdown-tech-notes.html","id":"corrupted","dir":"Articles","previous_headings":"","what":"Corrupted Files","title":"Technical Notes","text":"editing .Rmd (.Rnw) file Google Docs, possible introduce syntax errors break code longer possible render document locally downloading . applies Markdown (LaTeX) syntax R code. Markdown (LaTeX) syntax - Less expert collaborators likely introduce errors editing document Google Docs. Remember editing narrative text done using proper Markdown (LaTeX) syntax. formatting done Google Docs (e.g., bold, italic, titles, font size, etc.) lost download. Collaborators experience markup languages might find demanding. case, collaborators might prefer modify text format using standard formatting commands, leaving experienced collaborators translate formatting corresponding Markdown (LaTeX) syntax. R code - changes R code avoided editing files Google Docs. Collaborative code writing better done appropriate IDE (e.g., RStudio) using version control systems like Git. prevent collaborators inadvertently making changes code Google Docs, possible remove code header document (YAML header LaTeX preamble) code chunks specifying argument hide_code = TRUE. allows collaborators focus solely narrative text. allow correct code restoration download, however, placeholders type “[[document-header]]” “[[chunk-<name>]]” must modified removed editing file Google Docs. inadvertently removed, trackdown package try restore missing chunks placing last available placeholder. Unfortunately, process guarantee chucks placed correct position. Experienced collaborators can, however, easily fix possible issues allowing document compile. cases, using Git track .Rmd (.Rnw) files (better whole project) highly recommended. Git allows restoring previous versions document case issues. worst-case scenario trackdown able restore code chunks, experienced collaborators can still use Git information saved hidden .trackdown folder manually restore corrupted missing parts.","code":""},{"path":"/articles/trackdown-workflow.html","id":"wf-idea","dir":"Articles","previous_headings":"","what":"The Workflow Idea","title":"The trackdown Workflow","text":"collaborative writing .Rmd (.Rnw) document, important employ different workflows computer code narrative text: Code - Collaborative code writing done efficiently following traditional Git-based workflow using online repository (e.g., GitHub GitLab). Narrative Text - Collaborative writing narrative text done efficiently using Google Docs provides familiar simple online interface allows multiple users simultaneously write/edit document. Thus, workflow’s main idea simple: Upload .Rmd (.Rnw) document Google Drive collaboratively write/edit narrative text Google Docs; download document locally continue working code harnessing power Git version control collaboration. iterative process uploading downloading Google Drive continues desired results obtained. workflow can summarized : Collaborative code writing using Git & collaborative writing narrative text using Google Docs  trackdown offers different functions manage workflow: upload_file() uploads file first time Google Drive. update_file() updates content existing file Google Drive contents local file. download_file() downloads edited version file Google Drive updates local version. render_file() downloads file Google Drive renders locally. general overview package, see trackdown-package help page vignette(\"trackdown-features\") detailed description function arguments features vignette(\"trackdown-tech-notes\") technical details.","code":""},{"path":"/articles/trackdown-workflow.html","id":"wf-example","dir":"Articles","previous_headings":"","what":"Workflow Example","title":"The trackdown Workflow","text":"hypothetical workflow using trackdown described example. actual workflow flexible depends specific needs circumstances given user project. Suppose want collaborate colleagues writing R Markdown document, e.g., prepare submission scientific journal. experienced among colleagues usage R programming general, take responsibility managing organizing workflow.","code":""},{"path":"/articles/trackdown-workflow.html","id":"ex-upload","dir":"Articles","previous_headings":"Workflow Example","what":"Upload File","title":"The trackdown Workflow","text":"create initial document, example -Report.Rmd, upload file Google Drive using function upload_file(): executing command, -Report.Rmd file uploaded local computer Google Drive. default, file uploaded Google Drive using name local file (without extension) saved folder named trackdown/. Note trackdown adds simple instructions reminders top document , specifying argument hide_code = TRUE (default FALSE), header code (YAML) code chunks removed document displaying instead placeholders type “[[document-header]]” “[[chunk-<name>]]” (See Figure ). allows collaborators focus narrative text.  trackdown v1.3.0 [currently available GitHub], rich_text feature introduced allowing upload rich documents Google Docs. Now, important text changed automatically highlighted. includes, added instructions top document, placeholders hiding code, header document (YAML header LaTeX preamble), code chunks, -line code (see example Figure ). details, see vignette(\"trackdown-features\").","code":"trackdown::upload_file(file = \"Path-to-file/My-Report.Rmd\", hide_code = TRUE)"},{"path":"/articles/trackdown-workflow.html","id":"collaborate","dir":"Articles","previous_headings":"Workflow Example","what":"Collaborate","title":"The trackdown Workflow","text":"uploading document Google Drive, can now share link document colleagues invite collaborate writing narrative text. Google Docs offers familiar, intuitive, free web-based interface allows multiple users simultaneously write/edit document (See Figure ). Google Docs possible : track changes (incl. accepting/rejecting suggestions) add comments suggest discuss changes check spelling grammar errors (potentially integrating third-party services like Grammarly)  Moreover, Google Docs allows anyone contribute writing/editing document. programming experience required, users can just focus writing/editing narrative text. Remember working parts document including code avoided. Note collaborators Google account (although recommended utilize Google Docs features). person manages trackdown workflow needs Google account upload files Google Drive. collaborators can invited contribute document using shared link (See Instructions).","code":""},{"path":"/articles/trackdown-workflow.html","id":"ex-download","dir":"Articles","previous_headings":"Workflow Example","what":"Download File","title":"The trackdown Workflow","text":"point, want add code document include figures, tables, analysis results. done Google Docs, instead, first download document. downloading document Google Drive, however, important accept (reject) changes made collaborators document Google Docs. easy way accept changes menu command “Tools > Review suggested edits > Accept ”. Now edited version document can downloaded Google Drive using function download_file(): Note downloading file Google Drive overwrite local file.","code":"trackdown::download_file(file = \"Path-to-file/My-Report.Rmd\")"},{"path":"/articles/trackdown-workflow.html","id":"ex-update","dir":"Articles","previous_headings":"Workflow Example","what":"Update File","title":"The trackdown Workflow","text":"added required code chunks, editing narrative text may necessary. case, first update file Google Drive local version document using function update_file(): executing command, document Google Drive updated latest local changes. Now colleagues can continue collaborating writing document. iterative process updating file Google Drive downloading locally continues desired results obtained. Note updating file Google Drive overwrite current content losing tracked changes.","code":"trackdown::update_file(file = \"Path-to-file/My-Report.Rmd\", hide_code = TRUE)"},{"path":"/articles/trackdown-workflow.html","id":"ex-render","dir":"Articles","previous_headings":"Workflow Example","what":"Render File","title":"The trackdown Workflow","text":"document finished changes accepted, can download document automatically compile document obtain rendered output using function render_file(): function simply wrapper around download_file() additionally call rmarkdown::render() document downloaded.","code":"trackdown::render_file(file = \"Path-to-file/My-Report.Rmd\")"},{"path":"/articles/trackdown-workflow.html","id":"ex-check","dir":"Articles","previous_headings":"Workflow Example","what":"A Quick Check","title":"The trackdown Workflow","text":"Taking advantage “Undo” option available Google Docs, possible download current document version time workflow without need accept suggested edits permanently. can: Use menu option “Tools > Review suggested edits > Accept ” momentarily accept changes. Download (render) current version document using download_file() (render_file()) function. Google Drive, press “Undo” restore document previous state (.e., accepting changes). way, possible check current document compile locally time, without need accept suggested edits permanently. Note, however, possible update document Google Drive local changes. overwrite current content losing tracked changes.","code":""},{"path":"/articles/trackdown-workflow.html","id":"collab","dir":"Articles","previous_headings":"","what":"Collaboration: Narrative Text vs Code","title":"The trackdown Workflow","text":"stated , collaborative writing/editing .Rmd (.Rnw) document, important employ different workflows computer code narrative text. Collaborative code writing based version control systems like Git, whereas collaborative writing narrative text can done efficiently Google Docs. Let’s discuss two aspects: Code - Collaborative code writing done efficiently using version control systems like Git. Ideally, collaborators working code experienced enough organize project online repository (e.g., GitHub GitLab) manage workflow using Git. Writing editing actual code Google Docs, although possible, strongly discouraged possible run code check correct. Thus, easy introduce errors break code. highly recommended write code appropriate IDE (e.g., RStudio). Narrative Text - facilitate collaborative writing narrative text, trackdown moves whole process Google Docs. However, collaborators aware document downloaded Google Drive still considered .Rmd (.Rnw) file. Thus, formatting (e.g., bold, italic, titles, font size, etc.) done Google Docs lost. effectively format text, one use proper Markdown (LaTeX) syntax. Collaborators experience markup languages find demanding. case, might prefer modify text using common formatting options leave experienced collaborators translate text formatting appropriate Markdown (LaTeX) syntax. Overall, workflow proposed trackdown collaborative writing R Markdown (Sweave) document iterative process document uploaded/updated Google Drive collaborative writing/editing narrative text Google Docs downloaded locally collaborative code writing using Git. Note main limitation workflow possible simultaneously collaborate narrative text code included document. case, changes made two different copies document—changes narrative text saved Google Drive copy document, whereas changes code saved local copy document. two document versions can automatically merged trackdown overwritten, thus losing one two versions. However, structuring workflow sequential steps guarantee smooth experience. alternative solution problem keep inclusion R code R Markdown file minimum. separating code used , e.g., conduct statistical analyses, generate figures tables, etc., separate files calling R objects generated code R Markdown file, writing code narrative text can proceed simultaneously without interfering .","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Emily Kothe. Author. Claudio Zandonella Callegher. Author, maintainer. Filippo Gambarota. Author. Janosch Linkersdörfer. Author. Mathew Ling. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Emily Kothe, Claudio Zandonella Callegher, Filippo Gambarota, Janosch Linkersdörfer Mathew Ling  (2021). trackdown: Collaborative Writing Editing R Markdown (Sweave) Documents Google Drive. https://doi.org/10.5281/zenodo.5167319","code":"@Manual{,   title = {trackdown: Collaborative Writing and Editing of R Markdown (or Sweave) Documents in Google Drive},   author = {Emily Kothe and Claudio Zandonella Callegher and Filippo Gambarota and Janosch Linkersdörfer and Mathew Ling},   year = {2021},   note = {R package version 1.1.1},   url = {https://github.com/claudiozandonella/trackdown},   doi = {10.5281/zenodo.5167319}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Collaborative Editing of Rmd (or Rnw) Documents in Google Drive","text":"trackdown package offers simple solution collaborative writing editing R Markdown (Sweave) documents. Using trackdown, local .Rmd (.Rnw) file can uploaded plain-text file Google Drive. taking advantage easily readable Markdown (LaTeX) syntax well-known online interface offered Google Docs, collaborators can easily contribute writing editing process. integrating authors’ contributions, final document can downloaded rendered locally. trackdown v1.3.0 [currently available GitHub], trackdown package introduces rich_text feature uses API credentials. rich_text. Upload rich documents Google Docs important text changed automatically highlighted (e.g., placeholders hiding code, header document, code chunks, -line code). prevents collaborators inadvertently making changes code might corrupt file. See rich-text feature details. API Credentials. Now, trackdown uses Google API credentials (OAuth client ID secret). requires Google authentication enable “Trackdown R Package”. project undergoing Google verification already available Google displays warning message (see details issue comment). Don’t worry trackdown uses system googledrive package previously used. See details privacy policy vignette(\"trackdown-privacy-policy\")). [IMPORTANT] currently reached maximum number users API credentails. Installing development trackdown GitHub require create API credentials. Please, see instructions https://claudiozandonella.github.io/trackdown/articles/oauth-app-configuration.html","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Collaborative Editing of Rmd (or Rnw) Documents in Google Drive","text":"can install released version CRAN : install development version GitHub, run following code:","code":"install.packages(\"trackdown\") # install.packages(\"remotes\") remotes::install_github(\"claudiozandonella/trackdown\",                          build_vignettes = TRUE) library(trackdown)"},{"path":"/index.html","id":"the-trackdown-workflow","dir":"","previous_headings":"","what":"The trackdown Workflow","title":"Collaborative Editing of Rmd (or Rnw) Documents in Google Drive","text":"collaborative writing/editing .Rmd (.Rnw) document, important employ different workflows computer code narrative text: Code - Collaborative code writing done efficiently following traditional Git-based workflow using online repository (e.g., GitHub GitLab). Narrative Text - Collaborative writing narrative text done efficiently using Google Docs provides familiar simple online interface allows multiple users simultaneously write/edit document. Thus, workflow’s main idea simple: Upload .Rmd (.Rnw) document Google Drive collaboratively write/edit narrative text Google Docs; download document locally continue working code harnessing power Git version control collaboration. iterative process uploading downloading Google Drive continues desired results obtained. workflow can summarized : Collaborative code writing using Git & collaborative writing narrative text using Google Docs","code":""},{"path":"/index.html","id":"functions","dir":"","previous_headings":"The trackdown Workflow","what":"Functions","title":"Collaborative Editing of Rmd (or Rnw) Documents in Google Drive","text":"trackdown offers different functions manage workflow: upload_file() uploads file first time Google Drive. update_file() updates content existing file Google Drive contents local file. download_file() downloads edited version file Google Drive updates local version. render_file() downloads file Google Drive renders locally.","code":""},{"path":"/index.html","id":"special-features","dir":"","previous_headings":"The trackdown Workflow","what":"Special Features","title":"Collaborative Editing of Rmd (or Rnw) Documents in Google Drive","text":"trackdown offers additional features facilitate collaborative writing editing documents Google Docs. particular, possible : Hide Code: Code header document (YAML header LaTeX preamble) code chunks removed document uploading Google Drive automatically restored download. prevents collaborators inadvertently making changes code might corrupt file allows focus narrative text. Rich Text: Upload rich documents Google Docs. Important text changed automatically highlighted (e.g., placeholders hiding code, header document, code chunks, -line code). prevents collaborators inadvertently making changes code might corrupt file. Upload Output: actual output document (.e., rendered file) can uploaded Google Drive conjunction .Rmd (.Rnw) document. helps collaborators evaluate overall layout including figures tables allows add comments suggest discuss changes. Use Google Drive shared drives: documents can uploaded either personal Google Drive shared drive facilitate collaboration.","code":""},{"path":"/index.html","id":"advantages-of-google-docs","dir":"","previous_headings":"The trackdown Workflow","what":"Advantages of Google Docs","title":"Collaborative Editing of Rmd (or Rnw) Documents in Google Drive","text":"Google Docs offers users familiar, intuitive, free web-based interface allows multiple users simultaneously write/edit document. Google Docs possible : track changes (incl. accepting/rejecting suggestions) add comments suggest discuss changes check spelling grammar errors (potentially integrating third-party services like Grammarly) Moreover, Google Docs allows anyone contribute writing/editing document. programming experience required, users can just focus writing/editing narrative text. Note collaborators Google account (although recommended utilize Google Docs features). person manages trackdown workflow needs Google account upload files Google Drive. collaborators can invited contribute document using shared link (See Instructions).","code":""},{"path":"/index.html","id":"documentation-and-vignettes","dir":"","previous_headings":"The trackdown Workflow","what":"Documentation and Vignettes","title":"Collaborative Editing of Rmd (or Rnw) Documents in Google Drive","text":"documentation available https://claudiozandonella.github.io/trackdown/. know trackdown, please reference: vignette(\"trackdown-features\") detailed description function arguments features. vignette(\"trackdown-workflow\") workflow example discussion collaborate narrative text code. vignette(\"trackdown-tech-notes\") details regarding technical details like authentication file management. Guide create personal credentials https://claudiozandonella.github.io/trackdown/articles/oauth-app-configuration.html","code":""},{"path":"/index.html","id":"extending-trackdown","dir":"","previous_headings":"","what":"Extending trackdown","title":"Collaborative Editing of Rmd (or Rnw) Documents in Google Drive","text":"Workflows solutions proposed users: Synchronizing Multiple Documents (link). GitHub Gist John David Smith automatically keep track multiple documents multiple authors detecting local online changes. can used manage Distill website.","code":""},{"path":"/index.html","id":"contributing-to-trackdown","dir":"","previous_headings":"","what":"Contributing to trackdown","title":"Collaborative Editing of Rmd (or Rnw) Documents in Google Drive","text":"Development trackdown package ongoing project, surely many issues fix features propose/add. Anyone welcome contribute development. Please note project released Contributor Code Conduct. contributing project, agree abide terms. See Community guidelines information.","code":""},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Collaborative Editing of Rmd (or Rnw) Documents in Google Drive","text":"cite trackdown publications use: Emily Kothe, Claudio Zandonella Callegher, Filippo Gambarota, Janosch Linkersdörfer Mathew Ling (2021). trackdown: Collaborative Writing Editing R Markdown (Sweave) Documents Google Drive. https://doi.org/10.5281/zenodo.5167320. BibTeX entry :","code":"@Manual{,   title = {trackdown: Collaborative Writing and Editing of R Markdown (or Sweave) Documents in Google Drive},   author = {Emily Kothe and Claudio Zandonella Callegher and Filippo Gambarota and Janosch Linkersdörfer and Mathew Ling},   year = {2021},   note = {R package version 1.1.1},   url = {https://github.com/claudiozandonella/trackdown},   doi = {10.5281/zenodo.5772942}, }"},{"path":"/index.html","id":"privacy","dir":"","previous_headings":"","what":"Privacy","title":"Collaborative Editing of Rmd (or Rnw) Documents in Google Drive","text":"Privacy policy","code":""},{"path":"/reference/download_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Downloads from Google Docs — download_file","title":"Downloads from Google Docs — download_file","text":"Download edited version file Google Drive updating local version new changes.Use caution local version file overwritten!  know trackdown workflow features see trackdown-package help page.","code":""},{"path":"/reference/download_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downloads from Google Docs — download_file","text":"","code":"download_file(   file,   gfile = NULL,   gpath = \"trackdown\",   shared_drive = NULL,   rm_gcomments = FALSE,   force = FALSE )"},{"path":"/reference/download_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downloads from Google Docs — download_file","text":"file character. path local `.Rmd` `.Rnw` file. gfile character. name Google Drive file (defaults local file name). gpath character. (Sub)directory Drive shared drive (optional). default files uploaded folder \"trackdown\". specify another folder full path required (e.g., \"trackdown/my_folder\"). Use NULL upload directly root level, although recommended. shared_drive character. name Google Drive shared drive (optional). rm_gcomments [experimental] logical value indicating whether remove Google comments. force logical value indicating whether skip confirm check user (default FALSE).","code":""},{"path":"/reference/download_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downloads from Google Docs — download_file","text":"`TRUE` file Google Drive saved, `FALSE` otherwise.","code":""},{"path":"/reference/render_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Render file from Google Drive — render_file","title":"Render file from Google Drive — render_file","text":"Render file Google Drive edits know trackdown workflow features see trackdown-package help page.","code":""},{"path":"/reference/render_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render file from Google Drive — render_file","text":"","code":"render_file(   file,   gfile = NULL,   gpath = \"trackdown\",   shared_drive = NULL,   force = FALSE,   rm_gcomments = FALSE )"},{"path":"/reference/render_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render file from Google Drive — render_file","text":"file character. path local `.Rmd` `.Rnw` file. gfile character. name Google Drive file (defaults local file name). gpath character. (Sub)directory Drive shared drive (optional). default files uploaded folder \"trackdown\". specify another folder full path required (e.g., \"trackdown/my_folder\"). Use NULL upload directly root level, although recommended. shared_drive character. name Google Drive shared drive (optional). force logical value indicating whether skip confirm check user (default FALSE). rm_gcomments [experimental] logical value indicating whether remove Google comments.","code":""},{"path":"/reference/render_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render file from Google Drive — render_file","text":"`TRUE` file Google Drive saved rendered, `FALSE`   otherwise.","code":""},{"path":"/reference/trackdown-package.html","id":null,"dir":"Reference","previous_headings":"","what":"trackdown - R package for improving collaborative writing — trackdown-package","title":"trackdown - R package for improving collaborative writing — trackdown-package","text":"trackdown package offers simple solution collaborative writing editing R Markdown (Sweave) documents. Using trackdown, local .Rmd (.Rnw) file can uploaded plain-text file Google Drive. taking advantage easily readable Markdown (LaTeX) syntax well-known online interface offered Google Docs, collaborators can easily contribute writing editing process. integrating authors’ contributions, final document can downloaded rendered locally.","code":""},{"path":"/reference/trackdown-package.html","id":"the-trackdown-workflow","dir":"Reference","previous_headings":"","what":"The trackdown Workflow","title":"trackdown - R package for improving collaborative writing — trackdown-package","text":"collaborative writing/editing .Rmd (.Rnw)  document, important employ different workflows computer code  narrative text:  Code - Collaborative code writing done efficiently   following traditional Git-based workflow using online   repository (e.g., GitHub GitLab). Narrative Text - Collaborative writing narrative text   done efficiently using Google Docs provides familiar   simple online interface allows multiple users simultaneously   write/edit document. Thus, workflow’s main idea simple: Upload .Rmd (.Rnw)  document Google Drive collaboratively write/edit narrative text  Google Docs; download document locally continue working code  harnessing power Git version control collaboration.  iterative process uploading downloading Google Drive  continues desired results obtained. workflow can  summarized : Collaborative code writing using Git & collaborative writing  narrative text using Google Docs","code":""},{"path":"/reference/trackdown-package.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"trackdown - R package for improving collaborative writing — trackdown-package","text":"trackdown offers different functions manage workflow: upload_file uploads file first time Google   Drive. update_file updates content existing file   Google Drive contents local file. download_file downloads edited version file   Google Drive updates local version. render_file downloads file Google Drive   renders locally.","code":""},{"path":"/reference/trackdown-package.html","id":"special-features","dir":"Reference","previous_headings":"","what":"Special Features","title":"trackdown - R package for improving collaborative writing — trackdown-package","text":"trackdown offers additional features facilitate collaborative writing editing documents Google Docs. particular, possible : Hide Code: Code header document (YAML header   LaTeX preamble) code chunks removed document   uploading Google Drive automatically restored download.   prevents collaborators inadvertently making changes code   might corrupt file allows focus narrative   text. Upload Output: actual output document (.e.,   rendered file) can uploaded Google Drive conjunction   .Rmd (.Rnw) document. helps collaborators evaluate   overall layout including figures tables allows add   comments suggest discuss changes. Use Google Drive shared drives: documents can   uploaded personal Google Drive shared drive facilitate   collaboration.","code":""},{"path":"/reference/trackdown-package.html","id":"advantages-of-google-docs","dir":"Reference","previous_headings":"","what":"Advantages of Google Docs","title":"trackdown - R package for improving collaborative writing — trackdown-package","text":"Google Docs offers users familiar, intuitive, free web-based interface  allows multiple users simultaneously write/edit document.  Google Docs possible : track changes (incl. accepting/rejecting suggestions) add comments suggest discuss changes check spelling grammar errors (potentially integrating   third-party services like Grammarly) Moreover, Google Docs allows anyone contribute writing/editing  document. programming experience required, users can just focus  writing/editing narrative text. Note collaborators Google account (although  recommended utilize Google Docs features). person  manages trackdown workflow needs Google account  upload files Google Drive. collaborators can invited  contribute document using shared link.","code":""},{"path":"/reference/trackdown-package.html","id":"documentation-and-vignettes","dir":"Reference","previous_headings":"","what":"Documentation and Vignettes","title":"trackdown - R package for improving collaborative writing — trackdown-package","text":"documentation available https://claudiozandonella.github.io/trackdown/. know trackdown, please reference: vignette(\"trackdown-features\") detailed description   function arguments features. vignette(\"trackdown-workflow\") workflow example   discussion collaborate narrative text code. vignette(\"trackdown-tech-notes\") details regarding   technical details like authentication file management.","code":""},{"path":"/reference/trackdown_auth.html","id":null,"dir":"Reference","previous_headings":"","what":"Authorize trackdown — trackdown_auth","title":"Authorize trackdown — trackdown_auth","text":"Authorize trackdown view manage trackdown files. function wrapper around [gargle::token_fetch()]. default, directed web browser, asked sign Google account, grant trackdown permission operate behalf trackdown. default, permission, user credentials cached folder home directory, can automatically refreshed, necessary. Storage user level means token can used across multiple projects tokens less likely synced cloud accident. interacting R within browser (applies RStudio Server, RStudio Workbench, RStudio Cloud), need variant flow, known --band auth (\"oob\"). happen automatically, can request `use_oob = TRUE` , persistently, setting option via `options(gargle_oob_default = TRUE)`.","code":""},{"path":"/reference/trackdown_auth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authorize trackdown — trackdown_auth","text":"","code":"trackdown_auth(   email = gargle::gargle_oauth_email(),   path = NULL,   scopes = \"https://www.googleapis.com/auth/drive\",   cache = gargle::gargle_oauth_cache(),   use_oob = gargle::gargle_oob_default(),   token = NULL )"},{"path":"/reference/trackdown_auth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authorize trackdown — trackdown_auth","text":"email Optional. Allows user target specific Google identity. specified, used token lookup, .e. determine suitable token already available cache. token found, email used pre-select targetted Google identity OAuth chooser. Note, however, email associated token cached always determined token , never argument. Use NA FALSE match nothing force OAuth dance browser. Use TRUE allow email auto-discovery, exactly one matching token found cache. Specify just domain glob pattern, e.g. \"*@example.com\", create code \"just works\" alice@example.com bob@example.com. Defaults option named \"gargle_oauth_email\", retrieved gargle_oauth_email(). path JSON identifying service account, one forms supported txt argument jsonlite::fromJSON() (typically, file path JSON string). scopes character vector scopes request. Pick listed https://developers.google.com/identity/protocols/oauth2/scopes. certain token flows, \"https://www.googleapis.com/auth/userinfo.email\" scope unconditionally included. grants permission retrieve email address associated token; gargle uses index cached OAuth tokens. grants permission view send email generally considered low-value scope. cache Specifies OAuth token cache. Defaults option named \"gargle_oauth_cache\", retrieved via gargle_oauth_cache(). use_oob Whether prefer \"band\" authentication. Defaults option named \"gargle_oob_default\", retrieved via gargle_oob_default(). token token class Token2.0 object httr's class request, .e. token prepared httr::config() Token2.0 auth_token component.","code":""},{"path":"/reference/trackdown_auth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Authorize trackdown — trackdown_auth","text":"users, time, need call `trackdown_auth()` explicitly -- triggered first action requires authorization. Even called, default arguments often suffice. However, necessary, function allows user explicitly:   * Declare Google identity use, via email address.     multiple cached tokens, can clarify one use. can     also force trackdown switch one identity another.     cached token email, triggers return     browser choose identity give consent. can specify just     domain using glob pattern. means script     containing `email = \"*@example.com\"` can run without     tweaks machine either `alice@example.com`     `bob@example.com`.   * Use service account token workload identity federation.   * Bring [Token2.0][httr::Token-class].   * Specify non-default behavior re: token caching --bound     authentication.   * Customize scopes. details many ways find token, see [gargle::token_fetch()]. deeper control auth, use [trackdown_auth_configure()] bring OAuth app API key. Read gargle options, see [gargle::gargle_options].","code":""},{"path":[]},{"path":"/reference/trackdown_auth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Authorize trackdown — trackdown_auth","text":"","code":"if (FALSE) { # load/refresh existing credentials, if available # otherwise, go to browser for authentication and authorization trackdown_auth()  # see user associated with current token trackdown_user()  # force use of a token associated with a specific email trackdown_auth(email = \"myemail@example.com\") trackdown_user()  # force a menu where you can choose from existing tokens or # choose to get a new one trackdown_auth(email = NA)  # use a 'read only' scope, so it's impossible to edit or delete files # NOTE thaat this will allow only to download files from the drive  trackdown_auth(   scopes = \"https://www.googleapis.com/auth/drive.readonly\" )  # use a service account token trackdown_auth(path = \"foofy-83ee9e7c9c48.json\") }"},{"path":"/reference/trackdown_auth_configure.html","id":null,"dir":"Reference","previous_headings":"","what":"Edit and view auth configuration — trackdown_auth_configure","title":"Edit and view auth configuration — trackdown_auth_configure","text":"functions give control visibility auth configuration [trackdown_auth()] . `trackdown_auth_configure()` lets user specify :   * OAuth app, used obtaining user token. See vignette [get API credentials](https://gargle.r-lib.org/articles/get-api-credentials.html) . user configure settings, internal defaults used. `trackdown_oauth_app()` retrieves currently configured OAuth app.","code":""},{"path":"/reference/trackdown_auth_configure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edit and view auth configuration — trackdown_auth_configure","text":"","code":"trackdown_auth_configure(app, path)  trackdown_oauth_app()"},{"path":"/reference/trackdown_auth_configure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edit and view auth configuration — trackdown_auth_configure","text":"app OAuth app, sense [httr::oauth_app()]. path JSON downloaded Google Cloud Platform Console, containing client id (aka key) secret, one forms supported txt argument jsonlite::fromJSON() (typically, file path JSON string).","code":""},{"path":"/reference/trackdown_auth_configure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edit and view auth configuration — trackdown_auth_configure","text":"* `trackdown_auth_configure()`: object R6 class     [gargle::AuthState], invisibly.   * `trackdown_oauth_app()`: current user-configured     [httr::oauth_app()].","code":""},{"path":[]},{"path":"/reference/trackdown_auth_configure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edit and view auth configuration — trackdown_auth_configure","text":"","code":"# see the current user-configured OAuth app (probaby `NULL`) trackdown_oauth_app() #> <oauth_app> trackdown-rpackage #>   key:    550669979075-48g4eihu9hb0k8m3odd9if0j55gk022a.apps.googleusercontent.com #>   secret: <hidden>  if (require(httr)) {    # store current state, so we can restore   original_app <- trackdown_oauth_app()    # bring your own app via client id (aka key) and secret   google_app <- httr::oauth_app(     \"my-awesome-google-api-wrapping-package\",     key = \"123456789.apps.googleusercontent.com\",     secret = \"abcdefghijklmnopqrstuvwxyz\"   )   trackdown_auth_configure(app = google_app)    # confirm current app   trackdown_oauth_app()      # restore original state   trackdown_auth_configure(app = original_app)   trackdown_oauth_app() } #> <oauth_app> trackdown-rpackage #>   key:    550669979075-48g4eihu9hb0k8m3odd9if0j55gk022a.apps.googleusercontent.com #>   secret: <hidden>  if (FALSE) { # bring your own app via JSON downloaded from Google Developers Console trackdown_auth_configure(   path = \"/path/to/the/JSON/you/downloaded/from/google/dev/console.json\" ) }"},{"path":"/reference/trackdown_deauth.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear current token — trackdown_deauth","title":"Clear current token — trackdown_deauth","text":"Clears currently stored token. next time trackdown needs token, token acquisition process starts , fresh call [trackdown_auth()] , therefore, internally, call [gargle::token_fetch()]. Unlike packages use gargle, trackdown usable de-authorized state. Therefore, calling `trackdown_deauth()` clears token, .e. imply subsequent requests made API key lieu token.","code":""},{"path":"/reference/trackdown_deauth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear current token — trackdown_deauth","text":"","code":"trackdown_deauth()"},{"path":[]},{"path":"/reference/trackdown_deauth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clear current token — trackdown_deauth","text":"","code":"if (FALSE) { trackdown_deauth() trackdown_user() }"},{"path":"/reference/trackdown_has_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Is there a token on hand? — trackdown_has_token","title":"Is there a token on hand? — trackdown_has_token","text":"Reports whether trackdown stored token, ready use downstream requests.","code":""},{"path":"/reference/trackdown_has_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is there a token on hand? — trackdown_has_token","text":"","code":"trackdown_has_token()"},{"path":"/reference/trackdown_has_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is there a token on hand? — trackdown_has_token","text":"Logical.","code":""},{"path":[]},{"path":"/reference/trackdown_has_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is there a token on hand? — trackdown_has_token","text":"","code":"trackdown_has_token() #> [1] FALSE"},{"path":"/reference/trackdown_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce configured token — trackdown_token","title":"Produce configured token — trackdown_token","text":"internal use programming around trackdown API. Returns token pre-processed [httr::config()]. users need handle tokens \"hand\" , even need control, [trackdown_auth()] need. current token, [trackdown_auth()] called either load cache initiate OAuth2.0 flow. auth deactivated via [trackdown_deauth()], `trackdown_token()` returns `NULL`.","code":""},{"path":"/reference/trackdown_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce configured token — trackdown_token","text":"","code":"trackdown_token()"},{"path":"/reference/trackdown_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produce configured token — trackdown_token","text":"`request` object (S3 class provided [httr][httr::httr]).","code":""},{"path":[]},{"path":"/reference/trackdown_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Produce configured token — trackdown_token","text":"","code":"if (FALSE) { trackdown_token() }"},{"path":"/reference/trackdown_user.html","id":null,"dir":"Reference","previous_headings":"","what":"Get info on current user — trackdown_user","title":"Get info on current user — trackdown_user","text":"Reveals email address user associated current token. token loaded yet, function initiate auth.","code":""},{"path":"/reference/trackdown_user.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get info on current user — trackdown_user","text":"","code":"trackdown_user()"},{"path":"/reference/trackdown_user.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get info on current user — trackdown_user","text":"email address , token loaded, `NULL`.","code":""},{"path":[]},{"path":"/reference/trackdown_user.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get info on current user — trackdown_user","text":"","code":"if (FALSE) { trackdown_user() }"},{"path":"/reference/update_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Updates file in Google Drive — update_file","title":"Updates file in Google Drive — update_file","text":"Replaces content existing file Google Drive contents local file. also possible update (upload already present) output (pdf html) file specifying path_output argument. case html files, pagedown package Chrome available, users can decide upload pdf version html file.Use caution tracked changes Google Drive file lost!  know trackdown workflow features see trackdown-package help page.","code":""},{"path":"/reference/update_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updates file in Google Drive — update_file","text":"","code":"update_file(   file,   gfile = NULL,   gpath = \"trackdown\",   shared_drive = NULL,   hide_code = FALSE,   path_output = NULL,   rich_text = TRUE,   rich_text_par = NULL,   force = FALSE )"},{"path":"/reference/update_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updates file in Google Drive — update_file","text":"file character. path local `.Rmd` `.Rnw` file. gfile character. name Google Drive file (defaults local file name). gpath character. (Sub)directory Drive shared drive (optional). default files uploaded folder \"trackdown\". specify another folder full path required (e.g., \"trackdown/my_folder\"). Use NULL upload directly root level, although recommended. shared_drive character. name Google Drive shared drive (optional). hide_code logical value indicating whether remove code text document (chunks header). Placeholders type \"[[chunk-<name>]]\" displayed instead. path_output default NULL, specify path output upload together file. PDF directly uploaded, HTML can first converted PDF package pagedown Chrome available. rich_text [experimental] logical value (default TRUE) indicating whether upload Google Docs rich document (.e., important text changed highlighted). See “Rich Text” details section. rich_text_par [experimental] argument used pass list custom settings rich_text. See “Rich Text” details section. force logical value indicating whether skip confirm check user (default FALSE).","code":""},{"path":"/reference/update_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updates file in Google Drive — update_file","text":"dribble uploaded file (output specified).","code":""},{"path":"/reference/update_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Updates file in Google Drive — update_file","text":"Rich Text [experimental] rich_text option (default TRUE) allows upload rich document Google Docs. Important text changed highlighted. includes, added instructions top document, placeholders hiding code, header document (YAML header LaTeX preamble), code chunks, -line code. Default colour opaque yellow. can customize colour specifying rgb_color option rich_text_par argument. rgb_color list elements red, green, blue. element numeric value 0 1. See example .","code":""},{"path":"/reference/update_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Updates file in Google Drive — update_file","text":"","code":"if (FALSE) {  # Change default color to opaque light-blue update_file(file = \"path-to/my-file\", rich_text = TRUE,             rich_text_par = list(rgb_color = list(red = 102/255,                                                   green = 204/255,                                                   blue = 255/255))) }"},{"path":"/reference/upload_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload file to Google Drive for collaborative writing and editing — upload_file","title":"Upload file to Google Drive for collaborative writing and editing — upload_file","text":"Uploads local file Google Drive plain text document. upload file already exist chosen location. default files uploaded folder \"trackdown\", available Google Drive, permission create required user. update already existing file see update_file. also possible upload output (pdf html) file specifying path_output argument. case html files, pagedown package Chrome available, users can decide upload pdf version html file. know trackdown workflow features see trackdown-package help page.","code":""},{"path":"/reference/upload_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload file to Google Drive for collaborative writing and editing — upload_file","text":"","code":"upload_file(   file,   gfile = NULL,   gpath = \"trackdown\",   shared_drive = NULL,   hide_code = FALSE,   path_output = NULL,   rich_text = TRUE,   rich_text_par = NULL,   force = FALSE )"},{"path":"/reference/upload_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload file to Google Drive for collaborative writing and editing — upload_file","text":"file character. path local `.Rmd` `.Rnw` file. gfile character. name Google Drive file (defaults local file name). gpath character. (Sub)directory Drive shared drive (optional). default files uploaded folder \"trackdown\". specify another folder full path required (e.g., \"trackdown/my_folder\"). Use NULL upload directly root level, although recommended. shared_drive character. name Google Drive shared drive (optional). hide_code logical value indicating whether remove code text document (chunks header). Placeholders type \"[[chunk-<name>]]\" displayed instead. path_output default NULL, specify path output upload together file. PDF directly uploaded, HTML can first converted PDF package pagedown Chrome available. rich_text [experimental] logical value (default TRUE) indicating whether upload Google Docs rich document (.e., important text changed highlighted). See “Rich Text” details section. rich_text_par [experimental] argument used pass list custom settings rich_text. See “Rich Text” details section. force logical value indicating whether skip confirm check user (default FALSE).","code":""},{"path":"/reference/upload_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upload file to Google Drive for collaborative writing and editing — upload_file","text":"dribble uploaded file (output specified).","code":""},{"path":"/reference/upload_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Upload file to Google Drive for collaborative writing and editing — upload_file","text":"Rich Text [experimental] rich_text option (default TRUE) allows upload rich document Google Docs. Important text changed highlighted. includes, added instructions top document, placeholders hiding code, header document (YAML header LaTeX preamble), code chunks, -line code. Default colour opaque yellow. can customize colour specifying rgb_color option rich_text_par argument. rgb_color list elements red, green, blue. element numeric value 0 1. See example .","code":""},{"path":"/reference/upload_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upload file to Google Drive for collaborative writing and editing — upload_file","text":"","code":"if (FALSE) {  # Change default color to opaque light-blue upload_file(file = \"path-to/my-file\", rich_text = TRUE,             rich_text_par = list(rgb_color = list(red = 102/255,                                                   green = 204/255,                                                   blue = 255/255))) }"},{"path":[]},{"path":"/news/index.html","id":"trackdown-development-version-1","dir":"Changelog","previous_headings":"","what":"trackdown 1.4.0","title":"trackdown (development version)","text":"Allow custom Client API credentials. Developed initial input @maelle PR https://github.com/ClaudioZandonella/trackdown/pull/38 Review auth process google APIs using trackdown_* functions (see trackdown_auth.R) changing trackdown app oauth force googledrive use app credentials TRACKDOWN_APP environment variabel indicating path JSON file app credentials app credentials specified via httr::oauth_app() Use internal default trackdown app credentials","code":""},{"path":"/news/index.html","id":"trackdown-development-version-2","dir":"Changelog","previous_headings":"","what":"trackdown 1.3.4","title":"trackdown (development version)","text":"Highlight citation tags equations using rich_text","code":""},{"path":"/news/index.html","id":"trackdown-development-version-3","dir":"Changelog","previous_headings":"","what":"trackdown 1.3.3","title":"trackdown (development version)","text":"Fix issue indented code. Now correctly recognized.","code":""},{"path":"/news/index.html","id":"trackdown-development-version-4","dir":"Changelog","previous_headings":"","what":"trackdown 1.3.2","title":"trackdown (development version)","text":"Update privacy policy Trackdown R Package client API required scopes.","code":""},{"path":"/news/index.html","id":"trackdown-development-version-5","dir":"Changelog","previous_headings":"","what":"trackdown 1.3.1","title":"trackdown (development version)","text":"Fix default gfile name render_file() pull request #30 (@mone27)","code":""},{"path":"/news/index.html","id":"trackdown-development-version-6","dir":"Changelog","previous_headings":"","what":"trackdown 1.3.0","title":"trackdown (development version)","text":"Introduce rich_text feature uses API credentials (see Issue #28) rich_text. Upload rich documents Google Docs important text changed automatically highlighted (e.g., placeholders hiding code, header document, code chunks, -line code). See rich-text feature details. API Credentials. Now, trackdown uses Goole API credentials (OAuth client ID secret). See details privacy policy vignette(\"trackdown-privacy-policy\") issue comment.","code":""},{"path":"/news/index.html","id":"trackdown-development-version-7","dir":"Changelog","previous_headings":"","what":"trackdown 1.2.1","title":"trackdown (development version)","text":"Corrige output message pull request #29 (@chainsawriot)","code":""},{"path":"/news/index.html","id":"trackdown-development-version-8","dir":"Changelog","previous_headings":"","what":"trackdown 1.2.0","title":"trackdown (development version)","text":"Introduce force argument allowing users skip confirm checks overwriting documents (see Issue #27).","code":""},{"path":"/news/index.html","id":"trackdown-cran-release-development-version","dir":"Changelog","previous_headings":"","what":"trackdown 1.1.1 (CRAN release)","title":"trackdown (development version)","text":"Fix issue encoding Windows. Now trackdown assume \"UTF-8\" encoding relies \"native.enc\".","code":""},{"path":"/news/index.html","id":"trackdown-development-version-9","dir":"Changelog","previous_headings":"","what":"trackdown 1.1.0","title":"trackdown (development version)","text":"New features: Introduce (experimental) argument rm_gcommentsin download_file() automatically remove Google comments downloading file (See issue #25). Introduce support child .Rmd .Rnw files (documents without headers). Argument hide_code = TRUE can now used regardless whether file contains header code /chunks . fixed issues #22 #24.","code":""},{"path":"/news/index.html","id":"trackdown-development-version-10","dir":"Changelog","previous_headings":"","what":"trackdown 1.0.2","title":"trackdown (development version)","text":"Fix issue #21","code":""},{"path":"/news/index.html","id":"trackdown-development-version-11","dir":"Changelog","previous_headings":"","what":"trackdown 1.0.1","title":"trackdown (development version)","text":"Fix issue #17 issue #19","code":""},{"path":"/news/index.html","id":"trackdown-cran-release-development-version-1","dir":"Changelog","previous_headings":"","what":"trackdown 1.0.0 (CRAN release)","title":"trackdown (development version)","text":"Initial CRAN release Minor changes fix cran checks: googledrive dependency set (> 1.0.1) cli (>= 3.0.0) use relative path specify fixture vcr_files folders unit-tests","code":""},{"path":"/news/index.html","id":"trackdown-development-version-12","dir":"Changelog","previous_headings":"","what":"trackdown 0.1.1","title":"trackdown (development version)","text":"Following release googledrive version 2.0.0 (link), trackdown based interact Google Drive, updated internal functions. particular: Set googledrive (>= 2.0.0) Imports field DESCRIPTION file. Substitute team_drive_\\*() deprecated functions team_drive = deprecated arguments new shared_drive_*() functions shared_drive = argument googledrive functions used internally trackdown. Remove verbose = deprecated argument googledrive functions used internally trackdown. Instead, function googledrive::local_drive_quiet() used. Update unit-tests","code":""},{"path":"/news/index.html","id":"trackdown-development-version-13","dir":"Changelog","previous_headings":"","what":"trackdown 0.1.0","title":"trackdown (development version)","text":"Stable version full revision package previously named rmdrive workflow follows idea , several new features changes. main ones : File Supported: .Rmd .Rnw documents supported Hide Code: Code header document (YAML header LaTeX preamble) code chunks can removed document uploading Google Drive automatically restored download. prevents collaborators inadvertently making changes code might corrupt file allows focus narrative text. Upload Output: actual output document (.e., rendered file) can uploaded Google Drive conjunction .Rmd (.Rnw) document. helps collaborators evaluate overall layout (including figures tables) allows add comments suggest discuss changes. API Speed: Now upload download Google Drive faster. Documentation: Rich e detailed documentation available https://ekothe.github.io/trackdown/","code":""}]
